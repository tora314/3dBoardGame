@startuml
namespace GameManager{
    enum GameState{
        #Title
        #GameSetUp
        #PlayGame
        #Result
    }

    abstract GameBaseManager{
      -void ChangeGameState(GameState gameState)
    }

    class GameManager{

    }

    note top of GameDebugManager:Gameのデバッグを行う(Logとか)
    class GameDebugManager{

    }

    namespace GameSetUp{
        interface IGameSetUp{
            void GameSetUp
        }

         class GameSetUp{

        }

        GameSetUp --|> IGameSetUp
    }


    namespace PlayGame{

        class PlayGame{
          -int SelectedObjectId
        }

        class NPCManager{

        }

        note top of PlayCamera :Cameraネームスペース
        class PlayCamera{

        }

        PlayGame --> GameJudgement
        PlayGame --> NPCManager
        PlayGame --> PlayCamera

    }


    abstract StateBase{
        abstract void ExcuteState()
    }




    namespace ListManager{
        interface IListManager{
            void EnumPieces()
            void GetSelectedPieces() : GameObject
        }

        class ListGenerater{

        }

        class ListCtrl{

        }

        ListCtrl --|> IListManager
        ListCtrl -->ListGenerater

    }

    namespace TitleManager{
        interface ITitle{
            void DisplayTitle()
        }

        class Title{
            void StartGame()
        }

        Title --|>ITitle
    }

    namespace ResultManager{
        interface IResult{
            void SetResult()
            void DisplayResult()
            void Restart()
            void CalcurateScore()
        }

        class Result{

        }

        Result --|>IResult
    }

    class StateFactory{
        +StateBase GetTitle()
        +StateBase GetPlayGame()
        +StateBase GetGameSet()
        +StateBase GetResult()
    }

    GameManager --|>GameBaseManager
    GameDebugManager --|>GameBaseManager



    GameManager.GameState <-u-GameBaseManager

    StateFactory <-d-GameBaseManager


    GameManager.GameSetUp.GameSetUp-u--|>StateBase
    GameManager.PlayGame.PlayGame -u--|>StateBase
    GameManager.TitleManager.Title-u--|>StateBase
    GameManager.ResultManager.Result -u--|>StateBase

    GameManager.GameSetUp.GameSetUp<-d--StateFactory
    GameManager.PlayGame.PlayGame <-d--StateFactory
    GameManager.TitleManager.Title<-d--StateFactory
    GameManager.ResultManager.Result <-d--StateFactory




GameManager.PlayGame.PlayGame --u>GameManager.ListManager.ListCtrl
GameManager.GameSetUp.GameSetUp --u>GameManager.ListManager.ListCtrl
}

note as note1
  PlayGameクラス
  (自分のターンが始めるときにキングのカメラをtrueに。)
  1.EnumPicesで利用可能な駒のリストを取得
  2.DisplayListに1のリストを渡して表示する

  リストをクリック
  1.SelectedObjectIdのカメラをIsActivateCameraでfalseに
  2.GetTouchObjectIdを使ってタッチしたオブジェクトのId取得し、SelectedObjectIdに
  3.SelectedObjectIdのカメラをIsActivateCameraでtrueに

  (仮案)
  1.駒の移動相対的な範囲を取得(GetMoveRange)し、絶対Idに変換(GetAdjacentSurface)し、Idから座標に変換(GetPositionFromId)
  2.そのIDの面にアイコンを表示(メソッド未定義)する

  →アイコンがクリック:そのアイコンに結び付けられた面へと移動する
  4.アイコンを削除
  5.相手のターンへ

  →リストがクリック:
  4.アイコンを削除
  5.「リストをクリック」へ

end note

@enduml
